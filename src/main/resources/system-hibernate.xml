<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byName"
	   xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       					   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           				   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           				   http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
           				   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
						   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- 数据源 配置 -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="maxActive" value="${datasource.maxActive}"/>
        <property name="maxWait" value="${datasource.maxWait}"/>
        <property name="poolPreparedStatements" value="${datasource.poolPreparedStatements}"/>
	</bean> -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="dataSourceName" value="${datasource.name}" />
		<property name="minPoolSize" value="${datasource.c3p0.min_pool_size}" />
		<property name="maxPoolSize" value="${datasource.c3p0.max_pool_size}" />
		<property name="initialPoolSize" value="${datasource.c3p0.initial_pool_size}" />
		<property name="maxIdleTime" value="${datasource.c3p0.max_idle_time}" />
		<property name="acquireIncrement" value="${datasource.c3p0.acquire_increment}" />
		<property name="maxStatements" value="${datasource.c3p0.max_statements}" />
		<property name="maxStatementsPerConnection" value="${datasource.c3p0.max_statements_per_connection}" />
		<property name="idleConnectionTestPeriod" value="${datasource.c3p0.idle_connection_test_period}" />
		<property name="acquireRetryAttempts" value="${datasource.c3p0.acquire_retry_attempts}" />
		<property name="acquireRetryDelay" value="${datasource.c3p0.acquire_retry_delay}" />
		<property name="breakAfterAcquireFailure" value="${datasource.c3p0.break_after_acquire_failure}" />
		<property name="testConnectionOnCheckin" value="${datasource.c3p0.test_connection_on_checkin}" />
		<property name="testConnectionOnCheckout" value="${datasource.c3p0.test_connection_on_checkout}" />
		<property name="automaticTestTable" value="${datasource.c3p0.automatic_test_table}" />
	</bean> -->
	
	<!--proxool 连接池 -->
    <bean id="dataSource" class="com.kopliverpool.framework.core.datasource.ProxoolDataSourceEx">
        <property name="driver" value="${jdbc.driverClassName}"/>
        <property name="driverUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="alias" value="${datasource.proxool.alias}"/>
        <property name="houseKeepingTestSql" value="${datasource.proxool.houseKeepingTestSql}"/>
        <property name="maximumConnectionCount" value="${datasource.proxool.maximumConnectionCount}"/>
        <property name="houseKeepingSleepTime" value="${datasource.proxool.houseKeepingSleepTime}"/>
        <property name="minimumConnectionCount" value="${datasource.proxool.minimumConnectionCount}"/>
        <property name="maximumActiveTime" value="${datasource.proxool.maximumActiveTime}"/>
        <property name="maximumConnectionLifetime" value="${datasource.proxool.maximumConnectionLifetime}"/>
        <property name="prototypeCount" value="${datasource.proxool.prototypeCount}"/>
        <property name="testBeforeUse" value="${datasource.proxool.testBeforeUse}"/>
        <property name="testAfterUse" value="${datasource.proxool.testAfterUse}"/>
        <property name="simultaneousBuildThrottle" value="${datasource.proxool.simultaneousBuildThrottle}"/>
    </bean>
    
    <!--BoneCP 连接池 
    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource">
    	<property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        
        <property name="idleMaxAge" value="${datasource.bonecp.idleMaxAge}"/>
        <property name="idleConnectionTestPeriod" value="${datasource.bonecp.idleConnectionTestPeriod}"/>
        <property name="partitionCount" value="${datasource.bonecp.partitionCount}"/>
        <property name="acquireIncrement" value="${datasource.bonecp.acquireIncrement}"/>
        <property name="maxConnectionsPerPartition" value="${datasource.bonecp.maxConnectionsPerPartition}"/>
        <property name="minConnectionsPerPartition" value="${datasource.bonecp.minConnectionsPerPartition}"/>
        <property name="statementsCacheSize" value="${datasource.bonecp.statementsCacheSize}"/>
        <property name="releaseHelperThreads" value="${datasource.bonecp.releaseHelperThreads}"/>
    </bean>-->
    
    <!-- hibernate配置 -->
	<bean id="validationFactory" class="javax.validation.Validation" factory-method="buildDefaultValidatorFactory" />
	<bean id="beanValidationEventListener" class="org.hibernate.cfg.beanvalidation.BeanValidationEventListener">
		<constructor-arg index="0" ref="validationFactory" />
		<constructor-arg index="1">
			<props/>
		</constructor-arg>
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" depends-on="cacheManager" lazy-init="false">
		<property name="dataSource" ref="dataSource"></property>
		<property name="packagesToScan">
			<list>
				<value>com.kopliverpool.**.model.</value>
			</list>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.kopliverpool.framework.hibernate.model.SimpleModel</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
				
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				
				<prop key="hibernate.order_updates">${hibernate.order_updates}</prop>
				<prop key="hibernate.order_inserts">${hibernate.order_inserts}</prop>
				
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="pre-insert" value-ref="beanValidationEventListener" />
				<entry key="pre-update" value-ref="beanValidationEventListener" />
			</map>
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="dataSource" ref="dataSource"></property>
		<property name="nestedTransactionAllowed" value="true"></property>
	</bean>
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<constructor-arg ref="transactionManager"></constructor-arg>
	</bean>

	<!-- 事务管理 配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" order="0"/>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 以下方法为只读事务 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="tree*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="advList*" read-only="true" />
			
			<!-- 所有可写的方法都加入事务管理 -->
			<tx:method name="*" propagation="REQUIRED" />
			<!--   
				事务传播行为类型  
				REQUIRED  如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。  
				SUPPORTS   支持当前事务，如果当前没有事务，就以非事务方式执行。  
				MANDATORY  使用当前的事务，如果当前没有事务，就抛出异常。  
				REQUIRES_NEW  新建事务，如果当前存在事务，把当前事务挂起。  
				NOT_SUPPORTED   以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。  
				NEVER   以非事务方式执行，如果当前存在事务，则抛出异常。  
				NESTED  如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。  
			-->  
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<aop:config>
		<!-- 创建自动代理, 用于拦截平台中所有的业务类方法 -->
		<aop:advisor pointcut="execution(* com.kopliverpool..*Mgr.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* com.kopliverpool..*Handler.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- 缓存管理器配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="cacheManagerName" value="mainCacheManager"></property>
		<property name="configLocation" value="classpath:${ehcache.configFile}"></property>
		<property name="shared" value="true"></property>
	</bean>
	
	<!-- 线程池配置 -->
	<bean id="threadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${taskExecutor.corePoolSize}"></property>
		<property name="maxPoolSize" value="${taskExecutor.maxPoolSize}"></property>
		<property name="queueCapacity" value="${taskExecutor.queueCapacity}"></property>
		<property name="threadNamePrefix" value="${taskExecutor.threadNamePrefix}"></property>
		<!--<property name="rejectedExecutionHandler">
			<bean class="${taskExecutor.rejectedExecutionHandler}" />
		</property>-->
	</bean>
		
	
</beans>